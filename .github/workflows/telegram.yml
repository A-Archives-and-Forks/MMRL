name: Release to Telegram

on:
  workflow_call:
    inputs:
      title:
        type: string
        required: true
      message:
        type: string
        required: true
      releaseAssetName:
        type: string
        required: true
      debugAssetName:
        type: string
        required: true

jobs:
  release-tg:
    name: Release TG
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Clean APK output directory
        run: |
          rm -rf apk-out
          mkdir -p apk-out

      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.inputs.releaseAssetName }}
          path: apk-out

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.inputs.debugAssetName }}
          path: apk-out

      - name: Warn if multiple APKs
        run: |
          release_count=$(find apk-out -type f -name "${{ github.event.inputs.releaseAssetName }}.apk" | wc -l)
          debug_count=$(find apk-out -type f -name "${{ github.event.inputs.debugAssetName }}.apk" | wc -l)
          if [ "$release_count" -gt 1 ]; then
            echo "::warning::$release_count Release APKs found with name '${{ github.event.inputs.releaseAssetName }}.apk', uploading only the first one."
          fi
          if [ "$debug_count" -gt 1 ]; then
            echo "::warning::$debug_count Debug APKs found with name '${{ github.event.inputs.debugAssetName }}.apk', uploading only the first one."
          fi

      - name: Find Release APK
        id: find_release_apk
        run: |
          APK_NAME="${{ github.event.inputs.releaseAssetName }}"
          APK_PATH=$(find apk-out -type f -name "${APK_NAME}.apk" | head -n 1)
          if [ -z "$APK_PATH" ]; then
            APK_PATH=$(find apk-out -type f -name "*.apk" | head -n 1)
            echo "::warning::Could not find APK matching name '$APK_NAME.apk', using first found: $APK_PATH"
          fi
          echo "APK_PATH=$APK_PATH" >> $GITHUB_OUTPUT

      - name: Find Debug APK
        id: find_debug_apk
        run: |
          APK_NAME="${{ github.event.inputs.debugAssetName }}"
          APK_PATH=$(find apk-out -type f -name "${APK_NAME}.apk" | head -n 1)
          if [ -z "$APK_PATH" ]; then
            APK_PATH=$(find apk-out -type f -name "*.apk" | head -n 1)
            echo "::warning::Could not find APK matching name '$APK_NAME.apk', using first found: $APK_PATH"
          fi
          echo "APK_PATH=$APK_PATH" >> $GITHUB_OUTPUT

      - name: Get commit info and build timestamp
        id: meta
        run: |
          BUILD_DATE=$(date +"%Y-%m-%d %H:%M:%S")
          COMMIT_COUNT=$(git rev-list --count HEAD)
          VERSION=$((31320 + COMMIT_COUNT))
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV

      - name: Upload files to Telegram
        uses: xz-dev/TelegramFileUploader@v1.1.1
        with:
          to-who: '@MMRLCI'
          message: |
            ${{ inputs.title }}
            #ci_${{ env.VERSION }}
            
            Build on ${{ env.BUILD_DATE }}.

            **What's new?**
            
            ${{ inputs.message }}

            [Workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          files: |
            ${{ steps.find_release_apk.outputs.APK_PATH }}
            ${{ steps.find_debug_apk.outputs.APK_PATH }}
        env:
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
