import groovy.json.*
import org.json.*
import com.google.gson.*;

apply plugin: 'com.android.application'
apply plugin: 'com.github.node-gradle.node'

def app_name = "MMRL"

android {
    compileSdk 33

    defaultConfig {
        applicationId 'com.dergoogler.mmrl'
        minSdk 26
        targetSdk 33
        versionName '1.6.4'
        versionCode 164
        externalNativeBuild {
            cmake {
                cppFlags "-llog"
                arguments "-DANDROID_STL=c++_shared"
            }
        }
        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    buildTypes {
        release {
            resValue "string", "app_name", "${app_name}"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            multiDexEnabled true
        }
        debug {
            resValue "string", "app_name", "${app_name} Debug"
            jniDebuggable true
            renderscriptDebuggable true
            minifyEnabled false
            multiDexEnabled false
            applicationIdSuffix '.debug'
            buildConfigField "String", "BASE_URL", "\"leer\""
        }
    }
    externalNativeBuild {
        cmake {
            path = file("src/main/cpp/CMakeLists.txt")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        jniLibs {
            keepDebugSymbols += ['*/armeabi/*.so', '*/armeabi-v7a/*.so', '*/arm64-v8a/*.so', '*/mips/*.so', '*/mips64/*.so', '*/x86/*.so', '*/x86_64/*.so']
        }
        resources {
            excludes += ['META-INF/DEPENDENCIES.txt', 'META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/MANIFEST.MF', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/ASL2.0']
        }
    }
}

repositories {
    maven { url 'https://jitpack.io' }
    mavenCentral()
}

dependencies {
    implementation "androidx.browser:browser:1.5.0"
    implementation "com.github.topjohnwu.libsu:core:5.0.2"
    implementation "com.github.topjohnwu.libsu:io:5.0.1"
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "org.apache.cordova:framework:10.1.1"
    implementation "androidx.webkit:webkit:1.7.0"
    implementation 'com.jraska:console:1.2.0'
   // implementation 'com.google.android.material:material:1.6.0'
}

configurations.implementation.setCanBeResolved(true)

task printDepsTreeInJson {
    doLast {
        configurations.implementation.incoming.getResolutionResult().getAllDependencies().each { depResult  ->
            println "{\"from\":\"" + depResult.getFrom() + "\"," + "\"requested\":\"" + depResult.getRequested() + "\"}"
        }
    }
}

task printSolvedDepsTreeInJson {
    doLast {
        def jsonOutput = "["
        configurations.implementation.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
            def addToJson
            addToJson = { resolvedDep ->
                jsonOutput += "\n{"
                jsonOutput += "\"name\":\"${resolvedDep.module.id.group}:${resolvedDep.module.id.name}\","
                jsonOutput += "\"description\":\"${resolvedDep.module.id}\","
                jsonOutput += "\"version\":\"${resolvedDep.module.id.version}\","
                jsonOutput += "\"license\":\"null\","
                jsonOutput += "\"author\":\"null\","
                jsonOutput += "\"repository\":\"https://mvnrepository.com/artifact/${resolvedDep.module.id.group}/${resolvedDep.module.id.name}/${resolvedDep.module.id.version}\""
                jsonOutput += "},"
            }
            addToJson(dep)
        }
        if(jsonOutput[-1] == ','){
            jsonOutput = jsonOutput[0..-2]
        }
        jsonOutput += "]"

        // This took me more than two hours to make -_-
        def jsonFile =new JsonSlurper().parseText(jsonOutput)
        def json = JsonOutput.toJson(jsonFile)
        def pretty = JsonOutput.prettyPrint(json)
        def myFile = new File('./../Website/src/utils/native-licenses.json')
        myFile.write(pretty)
    }
}
