name: "Build APK"
description: "Builds an APK for a specified flavor and build type."
inputs:
  flavor:
    description: "Flavor"
    required: true
  buildType:
    description: "Build Type"
    required: true
runs:
  using: "composite"
  steps:
    - name: Set environment variables
      shell: bash
      run: |
        FLAVOR="${{ inputs.flavor }}"
        BUILD_TYPE="${{ inputs.buildType }}"

        echo "FLAVOR_CAPITALIZED=${FLAVOR^}" >> $GITHUB_ENV
        echo "FLAVOR_CAPITALIZED_ALL=${FLAVOR^^}" >> $GITHUB_ENV
        echo "FLAVOR_LOWERCASE=${FLAVOR,,}" >> $GITHUB_ENV
        echo "BUILD_TYPE_CAPITALIZED=${BUILD_TYPE^}" >> $GITHUB_ENV
        echo "BUILD_TYPE_LOWERCASE=${BUILD_TYPE,,}" >> $GITHUB_ENV
        echo "BUILD_COMMAND=${FLAVOR^}${BUILD_TYPE^}" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up signing key
      shell: bash
      run: |
        if [ -n "${{ secrets.KEY_STORE }}" ]; then
            echo keyStorePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> signing.properties
            echo keyAlias='${{ secrets.KEY_ALIAS }}' >> signing.properties
            echo keyPassword='${{ secrets.KEY_PASSWORD }}' >> signing.properties
            echo keyStore='${{ github.workspace }}/key.jks' >> signing.properties
            echo ${{ secrets.KEY_STORE }} | base64 --decode > ${{ github.workspace }}/key.jks
        fi

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: "zulu"
        java-version: 21

    - name: Set up Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        validate-wrappers: true

    - name: Build APK
      shell: bash
      run: chmod +x ./gradlew && ./gradlew assemble${{ env.BUILD_COMMAND }}

    - name: Get APK output
      id: apk
      shell: bash
      run: |
        apk_path=$(find app/build/outputs/apk/${{ env.FLAVOR_LOWERCASE }}/${{ env.BUILD_TYPE_LOWERCASE }} -name "*.apk" -print -quit)
        mapping_path=$(find app/build/outputs/mapping/${{ env.FLAVOR_LOWERCASE }}${{ env.BUILD_TYPE_CAPITALIZED }} -name "mapping.txt" -print -quit)
        name=$(basename "$apk_path" .apk)

        echo "name=$name" >> $GITHUB_OUTPUT
        echo "path=$apk_path" >> $GITHUB_OUTPUT
        echo "mapping=$mapping_path" >> $GITHUB_OUTPUT

        echo "${{ env.FLAVOR_CAPITALIZED_ALL }}_NAME=\"$name\"" >> ${{ inputs.flavor }}.${{ inputs.buildType }}.txt

    - name: Upload mapping as artifact
      if: ${{ steps.apk.outputs.mapping != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.flavor }}-${{ inputs.buildType }}-mapping
        path: ${{ steps.apk.outputs.mapping }}

    - name: Upload APK as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.apk.outputs.name }}
        path: ${{ steps.apk.outputs.path }}

    - name: Upload env info
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.flavor }}.${{ inputs.buildType }}
        path: ${{ inputs.flavor }}.${{ inputs.buildType }}.txt